/*-문제 설명
비밀지도
네오는 평소 프로도가 비상금을 숨겨놓는 장소를 알려줄 비밀지도를 손에 넣었다. 그런데 이 비밀지도는 숫자로 암호화되어 있어 위치를 확인하기 위해서는 암호를 해독해야 한다. 다행히 지도 암호를 해독할 방법을 적어놓은 메모도 함께 발견했다.

지도는 한 변의 길이가 n인 정사각형 배열 형태로, 각 칸은 "공백"(" ") 또는 "벽"("#") 두 종류로 이루어져 있다.
전체 지도는 두 장의 지도를 겹쳐서 얻을 수 있다. 각각 "지도 1"과 "지도 2"라고 하자. 지도 1 또는 지도 2 중 어느 하나라도 벽인 부분은 전체 지도에서도 벽이다. 지도 1과 지도 2에서 모두 공백인 부분은 전체 지도에서도 공백이다.
"지도 1"과 "지도 2"는 각각 정수 배열로 암호화되어 있다.
암호화된 배열은 지도의 각 가로줄에서 벽 부분을 1, 공백 부분을 0으로 부호화했을 때 얻어지는 이진수에 해당하는 값의 배열이다.
*/

function solution(n, arr1, arr2) {
  //2진수화
  arr1 = arr1.map((i) => i.toString(2));
  arr2 = arr2.map((i) => i.toString(2));

  let answer = arr1
    .map((i, index) => +i + +arr2[index])
    .map((i) => i + "")
    .map((i) =>
      i
        .padStart(n, "0")
        .split("")
        .map((i) => {
          return i == 0 ? " " : "#";
        })
        .join("")
    );
  return answer;
}

solution(5, [9, 20, 28, 18, 11], [30, 1, 21, 17, 28]);
//	["#####","# # #", "### #", "# ##", "#####"]
solution(6, [46, 33, 33, 22, 31, 50], [27, 56, 19, 14, 14, 10]);
// ["######", "### #", "## ##", " #### ", " #####", "### # "]

// => 문자열.padStart( maxLength , 채울 문자) : 문자열의 길이가 maxLength보다 작을 경우 나머지를 특정한 문자열로 채워주는 기능
// ex) '03'.padStart(6,'0'); // '000003'

/*
🤖 다른 사람의 풀이

function solution1(n, a, b) {
  return a.map((a, i) => (a | b[i]).toString(2).padStart(n, 0)
  .replace(/0/g, " ").replace(/1/g, "#")
  );
}

⚡️ 정규식 사용은 생각해놓고 또 못썼다.. 떼잉
📢 비트연산자 : 주어진 수를 2진수로 변환하여, 비트(bit) 단위로 논리 연산을 수행한다. 
   연산 부호를 하나만 써서 사용!

    ex) 5 | 3 = 0101 | 0011 => 7(0111)
        5 & 3 = 0101 & 0011 => 1(0001)
*/
